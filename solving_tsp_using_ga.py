# -*- coding: utf-8 -*-
"""Solving TSP using GA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kuaT_7qPjMrRu4dKzBb-VEfgyePE4wbr
"""

import random
import sys

# Define the chromosome
Chromosome = list[int]

# Calculate the total distance traveled by the salesman
def calculate_distance(chromosome: Chromosome, adj_matrix: list[list[float]]) -> float:
    distance = 0.0
    for i in range(len(chromosome) - 1):
        distance += adj_matrix[chromosome[i]][chromosome[i + 1]]
    return distance

# Generate an initial population of chromosomes
def generate_population(n: int, population_size: int) -> list[Chromosome]:
    population = []
    for i in range(population_size):
        chromosome = list(range(n))
        random.shuffle(chromosome)
        population.append(chromosome)
    return population

# Perform selection by tournament
def tournament_selection(population: list[Chromosome], adj_matrix: list[list[float]], tournament_size: int) -> Chromosome:
    best_chromosome = None
    best_fitness = sys.float_info.max
    for i in range(tournament_size):
        index = random.randint(0, len(population) - 1)
        fitness = calculate_distance(population[index], adj_matrix)
        if fitness < best_fitness:
            best_chromosome = population[index]
            best_fitness = fitness
    return best_chromosome

# Perform ordered crossover
def ordered_crossover(parent1: Chromosome, parent2: Chromosome) -> Chromosome:
    start_index = random.randint(0, len(parent1) - 1)
    end_index = random.randint(0, len(parent1) - 1)
    if start_index > end_index:
        start_index, end_index = end_index, start_index

    offspring = [-1] * len(parent1)

    for i in range(start_index, end_index + 1):
        offspring[i] = parent1[i]

    j = 0
    for i in range(len(parent2)):
        if j == start_index:
            j = end_index + 1
        if parent2[i] not in offspring:
            offspring[j] = parent2[i]
            j += 1

    return offspring

# Perform mutation by swapping two genes
def swap_mutation(chromosome: Chromosome) -> None:
    index1 = random.randint(0, len(chromosome) - 1)
    index2 = random.randint(0, len(chromosome) - 1)
    chromosome[index1], chromosome[index2] = chromosome[index2], chromosome[index1]

# Run the genetic algorithm
def genetic_algorithm(adj_matrix: list[list[float]], population_size: int, tournament_size: int, crossover_prob: float, mutation_prob: float, max_generations: int) -> Chromosome:
    n = len(adj_matrix)

    # Generate an initial population
    population = generate_population(n, population_size)

    for generation in range(max_generations):
        # Select parents using tournament selection
        parents = []
        for i in range(population_size):
            parents.append(tournament_selection(population, adj_matrix, tournament_size))

        # Perform crossover and mutation to create offspring
        offspring = []
        for i in range(0, population_size, 2):
            if i + 1 < population_size and random.random() < crossover_prob:
                child1 = ordered_crossover(parents[i], parents[i + 1])
                child2 = ordered_crossover(parents[i + 1], parents[i])
                offspring.append(child1)
                offspring.append(child2)
            else:
                offspring.append(parents[i])
                offspring.append(parents[i + 1])

        # Apply mutation to the offspring
        for chromosome in offspring:
            if random.random() < mutation_prob:
                swap_mutation(chromosome)

        # Evaluate the fitness of the offspring and replace the worst individuals in the population
        for chromosome in offspring:
            fitness = calculate_distance(chromosome, adj_matrix)
            if fitness < calculate_distance(population[-1], adj_matrix):
                population[-1] = chromosome
                population.sort(key=lambda x: calculate_distance(x, adj_matrix))

        # Return the best individual in the population
        best_chromosome = population[0]

    return best_chromosome

n = int(input("Enter the number of nodes in the graph: "))
adj_matrix = []
print("Enter the adjacency matrix, row by row:")
for i in range(n):
    row = list(map(float, input().split()))
    adj_matrix.append(row)

best_chromosome = genetic_algorithm(adj_matrix, population_size=100, tournament_size=5, crossover_prob=0.8, mutation_prob=0.02, max_generations=1000)

print("Best tour found: ", best_chromosome)